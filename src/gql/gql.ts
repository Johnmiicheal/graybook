/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "mutation LoginAdmin($password: String!, $adminNameOrEmail: String!) {\n  loginAdmin(password: $password, adminNameOrEmail: $adminNameOrEmail) {\n    errors {\n      field\n      message\n    }\n    admin {\n      id\n      createdAt\n      adminName\n      phoneNumber\n      isDisabled\n      profileImgUrl\n      email\n    }\n  }\n}": types.LoginAdminDocument,
    "mutation LogoutUser {\n  logoutUser\n}": types.LogoutUserDocument,
    "mutation RegisterAdmin($options: UsernamePasswordInput!) {\n  registerAdmin(options: $options) {\n    errors {\n      field\n      message\n    }\n    admin {\n      id\n      createdAt\n      adminName\n      phoneNumber\n      isDisabled\n      profileImgUrl\n      email\n    }\n  }\n}": types.RegisterAdminDocument,
    "mutation RegisterSchool($country: String!, $state: String!, $address: String!, $rcnumber: Float!, $schoolName: String!) {\n  registerSchool(\n    country: $country\n    state: $state\n    address: $address\n    rcnumber: $rcnumber\n    schoolName: $schoolName\n  ) {\n    school {\n      id\n      createdAt\n      schoolName\n      rcnumber\n      address\n      state\n      country\n      description\n      logoImgUrl\n      bannerImgUrl\n      creator\n    }\n  }\n}": types.RegisterSchoolDocument,
    "mutation RegisterStudent($profileImgUrl: String!, $academicResult: String!, $lgaOrigin: String!, $state: String!, $homeAddress: String!, $parentEmail: String!, $parentNumber: String!, $parentName: String!, $birthYear: String!, $birthMonth: String!, $birthDay: String!, $ageInput: Float!, $gradeClass: String!, $gender: String!, $lastName: String!, $firstName: String!) {\n  registerStudent(\n    profileImgUrl: $profileImgUrl\n    academicResult: $academicResult\n    lgaOrigin: $lgaOrigin\n    state: $state\n    homeAddress: $homeAddress\n    parentEmail: $parentEmail\n    parentNumber: $parentNumber\n    parentName: $parentName\n    birthYear: $birthYear\n    birthMonth: $birthMonth\n    birthDay: $birthDay\n    ageInput: $ageInput\n    gradeClass: $gradeClass\n    gender: $gender\n    lastName: $lastName\n    firstName: $firstName\n  ) {\n    student {\n      id\n      createdAt\n      firstName\n      lastName\n      gradeClass\n      gender\n      ageInput\n      birthDay\n      birthMonth\n      birthYear\n      isArchived\n      profileImgUrl\n      owner\n    }\n  }\n}": types.RegisterStudentDocument,
    "query Me {\n  me {\n    errors {\n      field\n      message\n    }\n    admin {\n      id\n      createdAt\n      adminName\n      phoneNumber\n      isDisabled\n      profileImgUrl\n      email\n    }\n  }\n}": types.MeDocument,
};

export function graphql(source: "mutation LoginAdmin($password: String!, $adminNameOrEmail: String!) {\n  loginAdmin(password: $password, adminNameOrEmail: $adminNameOrEmail) {\n    errors {\n      field\n      message\n    }\n    admin {\n      id\n      createdAt\n      adminName\n      phoneNumber\n      isDisabled\n      profileImgUrl\n      email\n    }\n  }\n}"): (typeof documents)["mutation LoginAdmin($password: String!, $adminNameOrEmail: String!) {\n  loginAdmin(password: $password, adminNameOrEmail: $adminNameOrEmail) {\n    errors {\n      field\n      message\n    }\n    admin {\n      id\n      createdAt\n      adminName\n      phoneNumber\n      isDisabled\n      profileImgUrl\n      email\n    }\n  }\n}"];
export function graphql(source: "mutation LogoutUser {\n  logoutUser\n}"): (typeof documents)["mutation LogoutUser {\n  logoutUser\n}"];
export function graphql(source: "mutation RegisterAdmin($options: UsernamePasswordInput!) {\n  registerAdmin(options: $options) {\n    errors {\n      field\n      message\n    }\n    admin {\n      id\n      createdAt\n      adminName\n      phoneNumber\n      isDisabled\n      profileImgUrl\n      email\n    }\n  }\n}"): (typeof documents)["mutation RegisterAdmin($options: UsernamePasswordInput!) {\n  registerAdmin(options: $options) {\n    errors {\n      field\n      message\n    }\n    admin {\n      id\n      createdAt\n      adminName\n      phoneNumber\n      isDisabled\n      profileImgUrl\n      email\n    }\n  }\n}"];
export function graphql(source: "mutation RegisterSchool($country: String!, $state: String!, $address: String!, $rcnumber: Float!, $schoolName: String!) {\n  registerSchool(\n    country: $country\n    state: $state\n    address: $address\n    rcnumber: $rcnumber\n    schoolName: $schoolName\n  ) {\n    school {\n      id\n      createdAt\n      schoolName\n      rcnumber\n      address\n      state\n      country\n      description\n      logoImgUrl\n      bannerImgUrl\n      creator\n    }\n  }\n}"): (typeof documents)["mutation RegisterSchool($country: String!, $state: String!, $address: String!, $rcnumber: Float!, $schoolName: String!) {\n  registerSchool(\n    country: $country\n    state: $state\n    address: $address\n    rcnumber: $rcnumber\n    schoolName: $schoolName\n  ) {\n    school {\n      id\n      createdAt\n      schoolName\n      rcnumber\n      address\n      state\n      country\n      description\n      logoImgUrl\n      bannerImgUrl\n      creator\n    }\n  }\n}"];
export function graphql(source: "mutation RegisterStudent($profileImgUrl: String!, $academicResult: String!, $lgaOrigin: String!, $state: String!, $homeAddress: String!, $parentEmail: String!, $parentNumber: String!, $parentName: String!, $birthYear: String!, $birthMonth: String!, $birthDay: String!, $ageInput: Float!, $gradeClass: String!, $gender: String!, $lastName: String!, $firstName: String!) {\n  registerStudent(\n    profileImgUrl: $profileImgUrl\n    academicResult: $academicResult\n    lgaOrigin: $lgaOrigin\n    state: $state\n    homeAddress: $homeAddress\n    parentEmail: $parentEmail\n    parentNumber: $parentNumber\n    parentName: $parentName\n    birthYear: $birthYear\n    birthMonth: $birthMonth\n    birthDay: $birthDay\n    ageInput: $ageInput\n    gradeClass: $gradeClass\n    gender: $gender\n    lastName: $lastName\n    firstName: $firstName\n  ) {\n    student {\n      id\n      createdAt\n      firstName\n      lastName\n      gradeClass\n      gender\n      ageInput\n      birthDay\n      birthMonth\n      birthYear\n      isArchived\n      profileImgUrl\n      owner\n    }\n  }\n}"): (typeof documents)["mutation RegisterStudent($profileImgUrl: String!, $academicResult: String!, $lgaOrigin: String!, $state: String!, $homeAddress: String!, $parentEmail: String!, $parentNumber: String!, $parentName: String!, $birthYear: String!, $birthMonth: String!, $birthDay: String!, $ageInput: Float!, $gradeClass: String!, $gender: String!, $lastName: String!, $firstName: String!) {\n  registerStudent(\n    profileImgUrl: $profileImgUrl\n    academicResult: $academicResult\n    lgaOrigin: $lgaOrigin\n    state: $state\n    homeAddress: $homeAddress\n    parentEmail: $parentEmail\n    parentNumber: $parentNumber\n    parentName: $parentName\n    birthYear: $birthYear\n    birthMonth: $birthMonth\n    birthDay: $birthDay\n    ageInput: $ageInput\n    gradeClass: $gradeClass\n    gender: $gender\n    lastName: $lastName\n    firstName: $firstName\n  ) {\n    student {\n      id\n      createdAt\n      firstName\n      lastName\n      gradeClass\n      gender\n      ageInput\n      birthDay\n      birthMonth\n      birthYear\n      isArchived\n      profileImgUrl\n      owner\n    }\n  }\n}"];
export function graphql(source: "query Me {\n  me {\n    errors {\n      field\n      message\n    }\n    admin {\n      id\n      createdAt\n      adminName\n      phoneNumber\n      isDisabled\n      profileImgUrl\n      email\n    }\n  }\n}"): (typeof documents)["query Me {\n  me {\n    errors {\n      field\n      message\n    }\n    admin {\n      id\n      createdAt\n      adminName\n      phoneNumber\n      isDisabled\n      profileImgUrl\n      email\n    }\n  }\n}"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;